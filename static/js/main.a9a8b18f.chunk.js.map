{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","LS_KEY","CARDS","split","App","props","getCard","RNG","suit","Math","floor","card","isRed","className","localStorage","random","toString","seed","date","Date","toLocaleDateString","state","window","seedrandom","this","card2","Component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+JAAAA,EAAOC,QAAU,IAA0B,kC,sLCKrCC,EAAS,oBAETC,EAAQ,CACZ,2KAAyCC,MAAM,KAC/C,2KAAyCA,MAAM,KAC/C,2KAAyCA,MAAM,KAC/C,2KAAyCA,MAAM,MAmDlCC,E,kDA7Cb,WAAYC,GAAQ,IAAD,uBACjB,cAAMA,IAgBRC,QAAU,SAACC,GACT,IAAMC,EAAOC,KAAKC,MAAc,EAARH,KAClBI,EAAOF,KAAKC,MAAc,GAARH,KAClBK,EAAiB,IAATJ,GAAuB,IAATA,EAC5B,OAAO,0BAAMK,UAAWD,EAAQ,MAAQ,SAAUV,EAAMM,GAAMG,KAnBzDG,aAAab,KAChBa,aAAab,GAAUQ,KAAKM,SAASC,WAAWb,MAAM,KAAK,IAE7D,IAAMc,EAAOH,aAAab,GACpBiB,GAAO,IAAIC,MAAOC,qBANP,OAQjB,EAAKC,MAAQ,CACXJ,OACAC,QAGFI,OAAOhB,QAAU,EAAKA,QACtBgB,OAAOpB,MAAQA,EAdE,E,qDA4BjB,IAHA,IAAMK,EAAM,IAAIgB,IAAWC,KAAKH,MAAMJ,KAAKO,KAAKH,MAAMH,MAChDP,EAAOa,KAAKlB,QAAQC,GACtBkB,EAAQD,KAAKlB,QAAQC,GAClBkB,GAASd,GACdc,EAAQD,KAAKlB,QAAQC,GAIvB,OACE,yBAAKM,UAAU,OACb,4BAAQA,UAAU,cAChB,6CACA,yBAAKA,UAAU,SAASF,EAAMc,GAC9B,yBAAKZ,UAAU,QAAf,SAA6BW,KAAKH,MAAMJ,Y,GAxChCS,aCHEC,QACW,cAA7BL,OAAOM,SAASC,UAEe,UAA7BP,OAAOM,SAASC,UAEhBP,OAAOM,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a9a8b18f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {Component} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport seedrandom from 'seedrandom';\n\nconst LS_KEY = \"two-card-day-seed\";\n\nconst CARDS = [\n  '🂡 🂢 🂣 🂤 🂥 🂦 🂧 🂨 🂩 🂪 🂫 🂭 🂮'.split(' '),\n  '🂱 🂲 🂳 🂴 🂵 🂶 🂷 🂸 🂹 🂺 🂻 🂽 🂾'.split(' '),\n  '🃁 🃂 🃃 🃄 🃅 🃆 🃇 🃈 🃉 🃊 🃋 🃍 🃎'.split(' '),\n  '🃑 🃒 🃓 🃔 🃕 🃖 🃗 🃘 🃙 🃚 🃛 🃝 🃞'.split(' '),\n]\n\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    if (!localStorage[LS_KEY]) {\n      localStorage[LS_KEY] = Math.random().toString().split('.')[1];\n    }\n    const seed = localStorage[LS_KEY];\n    const date = new Date().toLocaleDateString();\n\n    this.state = {\n      seed,\n      date\n    }\n\n    window.getCard = this.getCard;\n    window.CARDS = CARDS;\n  }\n\n  getCard = (RNG) => {\n    const suit = Math.floor(RNG() * 4);\n    const card = Math.floor(RNG() * 13 );\n    const isRed = suit === 1 || suit === 2;\n    return <span className={isRed ? \"red\" : \"black\"}>{CARDS[suit][card]}</span>;\n  };\n\n  render() {\n    const RNG = new seedrandom(this.state.seed+this.state.date);\n    const card = this.getCard(RNG);\n    let card2 = this.getCard(RNG);\n    while (card2 == card) {\n      card2 = this.getCard(RNG);\n    }\n\n\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>Today's Cards</h1>\n          <div className=\"cards\">{card}{card2}</div>\n          <div className=\"seed\">seed: {this.state.seed}</div>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}